#!/bin/bash
#===============================================================================
# FILE:         /usr/local/bin/enable_internet_access_for_vboxnet0
#
# USAGE:        # enable_internet_access_for_vboxnet0
#   OR          $ sudo enable_internet_access_for_vboxnet0
# OPTIONS:      none
#
# DESCRIPTION:  Add all necessary firewall rules for a default virtualbox
#                 host-only interface (vboxnet0) with default settings
#                 (192.168.56.0/24) incl. activating ip forwarding on the host.
#                 In the case of a plurality of available network interfaces,
#                 the first is selected with access to the internet
#                 (hopefully the right one!?).
#
# REQUIREMENTS: coreutils (id and echo), grep, sed, iproute2 (ip), gawk or mawk,
#                 iputils-ping and iptables
# BUGS:         ---
# NOTES:        ---
# AUTHOR:       Patrick Neumann, patrick@neumannsland.de
# COMPANY:      (privately)
#
# VERSION:      0.6 (beta)
# CREATED:      27.05.2015
#
# COPYRIGHT:    ---
# LICENSE:	---
#
# HISTORY:      0.6 - Patrick Neumann - Initial release
#===============================================================================

#=== FUNCTION ==================================================================
# NAME: error
# DESCRIPTION: Display red error messages surrounded by "Error" and "EXITING".
# PARAMETER 1: message (string)
#===============================================================================
function error () {
  /bin/echo -e "\033[01;31mError: ${1} . . . EXITING ! ! !\033[01;00m"
}

#-------------------------------------------------------------------------------
# Check, for root privileges.
#-------------------------------------------------------------------------------
if [[ 0 -ne "$( /usr/bin/id --user )" ]] ; then
  error "you need to be root"
  exit 1
fi

#=== FUNCTION ==================================================================
# NAME: hint
# DESCRIPTION: Display yellow hint messages starting with "Hint:".
# PARAMETER 1: message (string)
#===============================================================================
function hint () {
  /bin/echo -e "\033[01;33mHint: ${1}.\033[01;00m"
}

#=== FUNCTION ==================================================================
# NAME: success
# DESCRIPTION: Display green success messages with an ending "!".
# PARAMETER 1: message (string)
#===============================================================================
function success () {
  /bin/echo -e "\033[01;32m${1}!\033[01;00m"
}

#-------------------------------------------------------------------------------
# Check, for Debian GNU/Linux 8 (jessie) or Ubuntu 14.04 LTS
#   and define constants if needed.
#-------------------------------------------------------------------------------
if [ ! -f "/etc/os-release" ] ; then
  error "sorry, your distribution is not supported"
  exit 1
fi
source <( /bin/grep --fixed-strings \
                    --regexp="ID=" \
                    --regexp="VERSION_ID=" \
                    --regexp="PRETTY_NAME=" \
                    /etc/os-release \
          | /bin/sed "s/^/OR_/" )
case "${OR_ID}${OR_VERSION_ID}" in
  "debian8" )
    readonly IPROUTE2="/bin/ip"
    ;;
  "ubuntu14.04" )
    readonly IPROUTE2="/sbin/ip"
    ;;
  * )
    error "sorry, ${OR_PRETTY_NAME} is not supported"
    exit 1
esac

#-------------------------------------------------------------------------------
# IP-Adress of the router to the internet (constant).
#-------------------------------------------------------------------------------
# default via 192.168.2.1 dev eth0 proto static
readonly ROUTER="$( ${IPROUTE2} route show \
                    | /bin/grep --fixed-strings "default via" \
                    | /usr/bin/awk '{ print $3; }' )"

#-------------------------------------------------------------------------------
# Network interface which should have access to the router (constant).
#-------------------------------------------------------------------------------
readonly NIC="$( ${IPROUTE2} route show \
                 | /bin/grep --fixed-strings "default via" \
                 | /usr/bin/awk '{ print $5; }' )"

#-------------------------------------------------------------------------------
# Clean orphaned firewall rules (if necessary) and
#   add first firewall rule (if not present) or
#   exit on errors.
#-------------------------------------------------------------------------------
if [[ -n "${ROUTER}" ]]; then
  # -I = interface | -c = count
  if /bin/ping -I "${NIC}" -c 1 "${ROUTER}" > /dev/null 2>&1 ; then
    # 0 0 ACCEPT all -- vboxnet0 wlan0 192.168.56.0/24 0.0.0.0/0 ctstate NEW
    readonly REGEXP1="ACCEPT.*all.*vboxnet0.*192\.168\.56\.0/24.*0\.0\.0\.0/0.*ctstate NEW"
    readonly OLDNICS="$( /sbin/iptables --table filter --list FORWARD --numeric --verbose \
                         | /bin/grep --extended-regexp "${REGEXP1}" \
                         | /bin/grep --invert-match --fixed-strings "${NIC}" \
                         | /usr/bin/awk '{ print $7; }' )"
    if [[ -n "${OLDNICS}" ]] ; then
      for oldnic in $OLDNICS ; do
        /sbin/iptables --delete FORWARD \
                 --out-interface "${oldnic}" \
                 --in-interface vboxnet0 \
                 --source 192.168.56.0/24 \
                 --match conntrack \
                 --ctstate NEW \
                 --jump ACCEPT
        hint "orphaned (first) firewall rule deleted"
      done
    fi
    # 0 0 ACCEPT all -- vboxnet0 eth0 192.168.56.0/24 0.0.0.0/0 ctstate NEW
    if ! /sbin/iptables --table filter --list FORWARD --numeric --verbose \
         | /bin/grep --extended-regexp "${REGEXP1}" \
         > /dev/null 2>&1 ; then
      /sbin/iptables --append FORWARD \
               --out-interface "${NIC}" \
               --in-interface vboxnet0 \
               --source 192.168.56.0/24 \
               --match conntrack \
               --ctstate NEW \
               --jump ACCEPT
    else
      hint "matching rule1 already exists"
    fi
  else
    error "router is not reachable"
    exit 1
  fi
else
  error "no route to the internet found"
  exit 1
fi

#-------------------------------------------------------------------------------
# Add second firewall rule (if not present).
#-------------------------------------------------------------------------------
# 0 0 ACCEPT all -- * * 0.0.0.0/0 0.0.0.0/0 ctstate RELATED,ESTABLISHED
readonly REGEXP2="ACCEPT.*all.*(0\.0\.0\.0/0.*){2}ctstate RELATED,ESTABLISHED"
if ! /sbin/iptables --table filter --list FORWARD --numeric --verbose \
     | /bin/grep --extended-regexp "${REGEXP2}" \
     > /dev/null 2>&1 ; then
  /sbin/iptables --append FORWARD \
           --match conntrack \
           --ctstate ESTABLISHED,RELATED \
           --jump ACCEPT
else
  hint "second firewall rule already exists"
fi

#-------------------------------------------------------------------------------
# Add third firewall rule (if not present).
#-------------------------------------------------------------------------------
# 0 0 MASQUERADE all -- * * 0.0.0.0/0 0.0.0.0/0
readonly REGEXP3="MASQUERADE.*all(.*0\.0\.0\.0/0){2}"
if ! /sbin/iptables --table nat --list POSTROUTING --numeric --verbose \
     | /bin/grep --extended-regexp "${REGEXP3}" \
     > /dev/null 2>&1 ; then
  /sbin/iptables --append POSTROUTING \
           --table nat \
           --jump MASQUERADE
else
  hint "third firewall rule already exists"
fi

#-------------------------------------------------------------------------------
# Activating ip forwarding (if not active).
#-------------------------------------------------------------------------------
if [[ 0 -eq "$( cat /proc/sys/net/ipv4/ip_forward )" ]] ; then
  /bin/echo 1 > /proc/sys/net/ipv4/ip_forward
else
  hint "ip forwarding already enabled"
fi

#-------------------------------------------------------------------------------
# If the script reaches this point, everything is good!
#   (Otherwise read the error messages!)
#-------------------------------------------------------------------------------
success "Internet access for vboxnet0 was successfully enabled"

exit 0

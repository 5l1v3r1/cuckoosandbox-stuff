#!/bin/bash
#===============================================================================
# DIRECTORY:
#   ---
#
# FILE:
#   ./cuckoo_sandbox_installer
#
# USAGE:
#   $ sudo ./cuckoo_sandbox_installer
# OR
#   $ sudo su
#   # ./cuckoo_sandbox_installer
#
# OPTIONS:
#   none
#
# DESCRIPTION:
#   Automate the installation of "Cuckoo Sandbox" (incl. deps).
#   (http://docs.cuckoosandbox.org/en/1.2/installation/host/)
#
# REQUIREMENTS:
#   coreutils (id and echo), grep, sed, gawk or mawk, findutils,
#   aptitude, wget, tar, gzip, build-essential, passwd,...
#
# BUGS:
#   ---
#
# NOTES:
#   Tested on Debian8 and Ubuntu14.04.
#   Don't use it per sudo as root!
#
# AUTHOR:
#   Patrick Neumann, patrick@neumannsland.de
#
# COMPANY:
#   (privately)
#
# VERSION:
#   0.6 (beta)
#
# LINK TO THE MOST CURRENT VERSION:
#   https://raw.githubusercontent.com/casualscripter/cuckoosandbox-stuff/master/cuckoo_sandbox_installer
#
# CREATED:
#   28.05.2015
#
# COPYRIGHT (C):
#   2015 - Patrick Neumann
#
# LICENSE:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
# WARRANTY:
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# HISTORY:
#   0.6 - Patrick Neumann - Initial (public) release
#===============================================================================

#=== FUNCTION ==================================================================
# NAME: error
# DESCRIPTION: Display red error messages surrounded by "Error" and "EXITING".
# PARAMETER 1: message (string)
#===============================================================================
function error_exit () {
  /bin/echo -e "\033[01;31;40mError: ${1} . . . EXITING ! ! !\033[00m"
  exit 1
}

#-------------------------------------------------------------------------------
# Check for root privileges.
#-------------------------------------------------------------------------------
if [[ 0 -ne "$( /usr/bin/id --user )" ]] ; then
  error_exit "you need to be root"
fi

#-------------------------------------------------------------------------------
# Check for sudo.
#-------------------------------------------------------------------------------
if [[ -z "${SUDO_USER}" ]] ; then
  error_exit "execute this script per 'sudo' or after 'sudo su' or 'sudo -s'"
fi

#-------------------------------------------------------------------------------
# Don't use sudo as root.
#-------------------------------------------------------------------------------
if [[ "root" = "${SUDO_USER}" ]] ; then
  error_exit "please don't use sudo as root to fool this script"
fi

#=== FUNCTION ==================================================================
# NAME: error
# DESCRIPTION: Display red error messages starting with "Error".
# PARAMETER 1: message (string)
#===============================================================================
function error () {
  /bin/echo -e "\033[01;31;40mError: ${1}!\033[00m"
}

#=== FUNCTION ==================================================================
# NAME: hint
# DESCRIPTION: Display yellow hint messages starting with "Hint:".
# PARAMETER 1: message (string)
#===============================================================================
function hint () {
  /bin/echo -e "\033[01;33;40mHint: ${1}.\033[00m"
}

#=== FUNCTION ==================================================================
# NAME: success
# DESCRIPTION: Display green success messages with an ending "!".
# PARAMETER 1: message (string)
#===============================================================================
function success () {
  /bin/echo -e "\033[01;32;40m${1}!\033[00m"
}

#-------------------------------------------------------------------------------
# Check, for Debian GNU/Linux 8 (jessie) or Ubuntu 14.04 LTS
#   and define constants if needed.
#-------------------------------------------------------------------------------
if [ ! -f "/etc/os-release" ] ; then
  error_exit "sorry, your distribution is not supported"
fi
source <( /bin/grep --fixed-strings \
                    --regexp="ID=" \
                    --regexp="VERSION_ID=" \
                    --regexp="PRETTY_NAME=" \
                    /etc/os-release \
          | /bin/sed "s/^/OR_/" )
case "${OR_ID}${OR_VERSION_ID}" in
  "debian8" )
    readonly SUITE="jessie"
    ;;
  "ubuntu14.04" )
    readonly SUITE="trusty"
    ;;
  * )
    error_exit "sorry, ${OR_PRETTY_NAME} is not supported"
esac

#-------------------------------------------------------------------------------
# Resynchronize the package index files from their sources.
#-------------------------------------------------------------------------------
/usr/bin/apt-get update

#-------------------------------------------------------------------------------
# The mother (Debian GNU/Linux) prefer "aptitude" over "apt-get".
#-------------------------------------------------------------------------------
if [ ! -x "/usr/bin/aptitude" ] ; then
  /usr/bin/apt-get install aptitude --assume-yes
fi

#-------------------------------------------------------------------------------
# Keep the system up to date and clean.
#-------------------------------------------------------------------------------
/usr/bin/aptitude full-upgrade
/usr/bin/aptitude autoclean
/usr/bin/dpkg --get-selections \
  | /bin/grep deinstall \
  | /usr/bin/awk '{ print $1; }' \
  | /usr/bin/xargs /usr/bin/aptitude purge --assume-yes
if [ ! -x "/usr/bin/deborphan" ] ; then
  /usr/bin/aptitude install deborphan --assume-yes
fi
while REDUNDANT="$( /usr/bin/deborphan )" ; /usr/bin/test -n "${REDUNDANT}" ; do
  /usr/bin/aptitude purge "${REDUNDANT}" --assume-yes
done

#-------------------------------------------------------------------------------
# Install required software an libraries by "aptitude".
#   Notes: "SQLAlchemy" installed by "pip" is to "new"!
#          "Pymongo" installed by "pip" is to "new"!
#-------------------------------------------------------------------------------
/usr/bin/aptitude install python \
                          python-sqlalchemy \
                          python-pymongo \
                          python-pip \
                          mongodb \
                          libpython-dev \
                          libxml2-dev \
                          libxslt1-dev \
                          zlib1g-dev \
                          automake \
                          libtool \
                          libpcre++-dev \
                          libssl-dev \
                          libjansson-dev \
                          libmagic-dev \
                          libfreetype6-dev \
                          ipython-notebook \
                          libfuzzy-dev \
                          tcpdump \
                          libcap2-bin \
                          --assume-yes

case "${SUITE}" in
  "jessie" )
    /usr/bin/aptitude install libjpeg62-turbo-dev \
                              ssdeep \
                              --assume-yes

    /bin/mkdir --parents ~/Downloads/Lcms1
    cd ~/Downloads/Lcms1
    /usr/bin/wget http://vorboss.dl.sourceforge.net/project/lcms/lcms/1.19/lcms-1.19.tar.gz
    /bin/tar --extract \
             --gunzip \
             --file lcms-1.19.tar.gz
    cd lcms-1.19
    ./configure
    /usr/bin/make
    /usr/bin/make install
    /sbin/ldconfig
    ;;
  "trusty" )
    /usr/bin/aptitude install libjpeg62-dev \
                              liblcms1-dev \
                             --assume-yes
esac

#-------------------------------------------------------------------------------
# Install required software an libraries by "pip".
#   Note: regarding "cybox" and "maec" the correct sequence must be observed!
#-------------------------------------------------------------------------------
/usr/bin/pip install dpkt \
                     jinja2 \
                     python-magic \
                     bottle \
                     django \
                     pefile \
                     chardet \
                     nose \
                     distorm3 \
                     pycrypto \
                     openpyxl \
                     pytz

/usr/bin/pip install cybox==2.0.1.4

/usr/bin/pip install maec==4.0.1.0

#-------------------------------------------------------------------------------
# Manual installation of "Pydeep".
#   Note: Ssdeep in "Trusty" (2.7) is too old!
#-------------------------------------------------------------------------------
if [[ "trusty" = "${SUITE}" ]] ; then
  /bin/mkdir --parents ~/Downloads/Ssdeep
  cd ~/Downloads/Ssdeep
  /usr/bin/wget http://cznic.dl.sourceforge.net/project/ssdeep/ssdeep-2.13/ssdeep-2.13.tar.gz
  /bin/tar --extract \
           --gunzip \
           --file ssdeep-2.13.tar.gz
  cd ssdeep-2.13
  ./configure
  /usr/bin/make
  /usr/bin/make install
  /sbin/ldconfig

  if ssdeep -V > /dev/null 2>&1 ; then
    success "Ssdeep has been successfully installed"
  else
    error_exit "during the installation of Ssdeep has been an error"
  fi
fi

/bin/mkdir --parents ~/Downloads/Pydeep
cd ~/Downloads/Pydeep
/usr/bin/wget https://github.com/kbandla/pydeep/archive/0.2.tar.gz
/bin/tar --extract \
         --gunzip \
         --file 0.2.tar.gz
cd pydeep-0.2
/usr/bin/python setup.py build
/usr/bin/python setup.py install
cd tests

if /usr/bin/python test.py > /dev/null 2>&1 ; then
  success "Pydeep has been successfully installed"
else
  error_exit "during the installation of Pydeep has been an error"
fi

#-------------------------------------------------------------------------------
# Manual installation of "Yara" and "Yara-Python".
#-------------------------------------------------------------------------------
/bin/mkdir --parents ~/Downloads/Yara
cd ~/Downloads/Yara
/usr/bin/wget https://github.com/plusvic/yara/archive/v3.3.0.tar.gz
/bin/tar --extract \
         --gunzip \
         --file v3.3.0.tar.gz
cd yara-3.3.0
./bootstrap.sh
./configure --enable-cuckoo \
            --enable-magic
/usr/bin/make
/usr/bin/make install
/sbin/ldconfig

cd yara-python
/usr/bin/python setup.py build
/usr/bin/python setup.py install

if /usr/bin/python tests.py > /dev/null 2>&1 ; then
  success "Yara and Yara-Python has been successfully installed"
else
  error_exit "during the installation of Yara and/or Yara-Python has been an error"
fi

#-------------------------------------------------------------------------------
# Manual installation of "Volatility" (incl. dependencies).
#-------------------------------------------------------------------------------
/bin/ln -s /usr/include/freetype2 /usr/include/freetype
/bin/mkdir --parents ~/Downloads/PIL
cd ~/Downloads/PIL
/usr/bin/wget http://effbot.org/downloads/Imaging-1.1.7.tar.gz
/bin/tar --extract \
         --gunzip \
         --file Imaging-1.1.7.tar.gz
cd Imaging-1.1.7
/bin/sed --in-place \
         's/JPEG_ROOT = None/JPEG_ROOT = "\/usr\/lib\/x86_64-linux-gnu", "\/usr\/include"/' \
         setup.py
/bin/sed --in-place \
         's/ZLIB_ROOT = None/ZLIB_ROOT = "\/usr\/lib\/x86_64-linux-gnu", "\/usr\/include"/' \
         setup.py
/bin/sed --in-place \
         's/TIFF_ROOT = None/TIFF_ROOT = "\/usr\/lib\/x86_64-linux-gnu", "\/usr\/include"/' \
         setup.py
/bin/sed --in-place \
         's/FREETYPE_ROOT = None/FREETYPE_ROOT = "\/usr\/lib\/x86_64-linux-gnu", "\/usr\/include"/' \
         setup.py
/bin/sed --in-place \
         's/LCMS_ROOT = None/LCMS_ROOT = "\/usr\/local\/lib", "\/usr\/local\/include"/' \
         setup.py
/usr/bin/python setup.py build
/usr/bin/python setup.py install

/usr/bin/python setup.py build_ext -i
if /usr/bin/python selftest.py > /dev/null 2>&1 ; then
  success "Python Imaging Library (PIL) has been successfully installed"
else
  error_exit "during the installation of Python Imaging Library (PIL) has been an error"
fi

/bin/mkdir --parents ~/Downloads/Pyxpress
cd ~/Downloads/Pyxpress/
/usr/bin/wget http://volatility.googlecode.com/svn-history/r1609/branches/scudette/contrib/pyxpress/pyxpress.c
/usr/bin/wget http://volatility.googlecode.com/svn-history/r1609/branches/scudette/contrib/pyxpress/setup.py
/usr/bin/python setup.py build
/usr/bin/python setup.py install

/bin/mkdir --parents ~/Downloads/Clamav_to_Yara
cd ~/Downloads/Clamav_to_Yara
/usr/bin/wget http://malwarecookbook.googlecode.com/svn/trunk/3/3/clamav_to_yara.py
/bin/cp clamav_to_yara.py /usr/local/bin/
/bin/chown root:root /usr/local/bin/clamav_to_yara.py
/bin/chmod 755 /usr/local/bin/clamav_to_yara.py

/bin/mkdir --parents ~/Downloads/Volatility
cd ~/Downloads/Volatility
/usr/bin/wget https://github.com/volatilityfoundation/volatility/archive/2.4.1.tar.gz
/bin/tar --extract \
         --gunzip \
         --file 2.4.1.tar.gz
cd volatility-2.4.1
python setup.py install

if /usr/local/bin/vol.py --info > /dev/null 2>&1 ; then
  success "Volatility has been successfully installed"
else
  error_exit "during the installation of Volatility has been an error"
fi

#-------------------------------------------------------------------------------
# Installation "of VirtualBox"
#   (incl. configuring host-only interface and network).
#-------------------------------------------------------------------------------
/bin/echo "deb http://download.virtualbox.org/virtualbox/debian ${SUITE} contrib" \
  > /etc/apt/sources.list.d/virtualbox.list
/usr/bin/wget https://www.virtualbox.org/download/oracle_vbox.asc \
              --quiet \
              --output-document=- \
  | /usr/bin/apt-key add -
/usr/bin/aptitude update
/usr/bin/aptitude install virtualbox-4.3 --assume-yes
/usr/sbin/usermod --append \
                  --groups vboxusers \
                  "${SUDO_USER}"

if /usr/bin/VBoxManage --version > /dev/null 2>&1 ; then
  success "VirtualBox has been successfully installed"
else
  error_exit "during the installation of VirtualBox has been an error"
fi

#-------------------------------------------------------------------------------
# Confiugure "VirtualBox" to fit "our" installation.
#-------------------------------------------------------------------------------
/usr/bin/VBoxManage hostonlyif create
/usr/bin/VBoxManage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1

#-------------------------------------------------------------------------------
# Download and install "our" firewall scripts.
#-------------------------------------------------------------------------------
/bin/mkdir --parents ~/Downloads/CuckooSandboxStuff
cd ~/Downloads/CuckooSandboxStuff
/usr/bin/wget https://raw.githubusercontent.com/casualscripter/cuckoosandbox-stuff/master/usr/local/bin/enable_internet_access_for_vboxnet0
/bin/cp enable_internet_access_for_vboxnet0 \
        /usr/local/bin/enable_internet_access_for_vboxnet0
/bin/chown root:root /usr/local/bin/enable_internet_access_for_vboxnet0
/bin/chmod 755 /usr/local/bin/enable_internet_access_for_vboxnet0

/usr/bin/wget https://raw.githubusercontent.com/casualscripter/cuckoosandbox-stuff/master/usr/local/bin/disable_internet_access_for_vboxnet0
/bin/cp disable_internet_access_for_vboxnet0 \
        /usr/local/bin/disable_internet_access_for_vboxnet0
/bin/chown root:root /usr/local/bin/disable_internet_access_for_vboxnet0
/bin/chmod 755 /usr/local/bin/disable_internet_access_for_vboxnet0

#-------------------------------------------------------------------------------
# Confiugure "tcpdump".
#-------------------------------------------------------------------------------
/sbin/setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump

#-------------------------------------------------------------------------------
# Manual installation of "Cuckoo Sandbox".
#   Important: The "user" needs write access to the Cuckoo Sandbox directory!
#-------------------------------------------------------------------------------
/bin/mkdir --parents ~/Downloads/CuckooSandbox
cd ~/Downloads/CuckooSandbox
/usr/bin/wget https://github.com/cuckoobox/cuckoo/archive/1.2.tar.gz
readonly CUCKOO_DIR="/opt/cuckoo12"
/bin/mkdir "${CUCKOO_DIR}"
/bin/tar --directory="${CUCKOO_DIR}" \
         --strip-components="1" \
         --extract \
         --gunzip \
         --file 1.2.tar.gz
/usr/sbin/addgroup cuckoo
/usr/sbin/usermod --append \
                  --groups cuckoo \
                  "${SUDO_USER}"
/bin/chown --recursive root:cuckoo "${CUCKOO_DIR}"
/bin/chmod --recursive 775 "${CUCKOO_DIR}"

if "${CUCKOO_DIR}/cuckoo.py" --version > /dev/null 2>&1 ; then
  success "Cuckoo Sandbox has been successfully installed"
else
  error_exit "during the installation of Cuckoo Sandbox has been an error"
fi

#-------------------------------------------------------------------------------
# Confiugure "Cuckoo Sandbox" to fit "our" installation.
#-------------------------------------------------------------------------------
/bin/sed --in-place \
         --regexp-extended \
         's/(memory_dump = )(off)/\1on/' \
         "${CUCKOO_DIR}/conf/cuckoo.conf"

/bin/sed --in-place \
         --regexp-extended \
         's/(guest_profile = )(WinXPSP2x86)/\1WinXPSP3x86/' \
         "${CUCKOO_DIR}/conf/memory.conf"

/bin/sed --in-place \
         --regexp-extended \
         '/\[memory\]/{n;s/(enabled = )(no)/\1yes/}' \
         "${CUCKOO_DIR}/conf/processing.conf"

/bin/sed --in-place \
         --regexp-extended \
         '/\[mmdef\]/{n;s/(enabled = )(no)/\1yes/}' \
         "${CUCKOO_DIR}/conf/reporting.conf"

/bin/sed --in-place \
         --regexp-extended \
         '/\[maec40\]/{n;s/(enabled = )(no)/\1yes/}' \
         "${CUCKOO_DIR}/conf/reporting.conf"

/bin/sed --in-place \
         --regexp-extended \
         '/\[mmdef\]/{n;s/(enabled = )(no)/\1yes/}' \
         "${CUCKOO_DIR}/conf/reporting.conf"

/bin/sed --in-place \
         --regexp-extended \
         's/(output_handles = )(false)/\1true/' \
         "${CUCKOO_DIR}/conf/reporting.conf"

/bin/sed --in-place \
         --regexp-extended \
         '/\[mongodb\]/{n;s/(enabled = )(no)/\1yes/}' \
         "${CUCKOO_DIR}/conf/reporting.conf"

/bin/sed --in-place \
         --regexp-extended \
         's/(USE_TZ = )(False)/\1True/' \
         "${CUCKOO_DIR}/web/web/settings.py"

/bin/sed --in-place \
         --regexp-extended \
         's/(TIME_ZONE = )(None)/\1"Europe\/Berlin"/' \
         "${CUCKOO_DIR}/web/web/settings.py"

#-------------------------------------------------------------------------------
# Because group permissions have been changed relog is required!
#-------------------------------------------------------------------------------

hint "please logout and login again thus affecting new group memberships"

exit 0
